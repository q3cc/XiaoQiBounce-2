/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2025 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.phase.modes

import net.ccbluex.liquidbounce.config.types.nesting.Choice
import net.ccbluex.liquidbounce.config.types.nesting.ChoiceConfigurable
import net.ccbluex.liquidbounce.event.tickHandler
import net.ccbluex.liquidbounce.features.module.modules.exploit.phase.ModulePhase
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket
import net.minecraft.util.math.Direction
import kotlin.math.cos
import kotlin.math.sin

/**
 * @anticheat Intave
 * @anticheatVersion 14.9.0
 * @testedOn mineblaze.net, go.mineberry.org
 * @author larryngton
 * Only works on 1.8.x
 */
object PhaseIntave : Choice("Intave") {
    override val parent: ChoiceConfigurable<*>
        get() = ModulePhase.mode

    private var mining = false

    @Suppress("unused")
    private val tickHandler = tickHandler {
        val check = mc.options.attackKey.isPressed && player.pitch > 80

        val blockPos = player.blockPos.add(0, -1, 0)

        if (check) {
            network.sendPacket(
                PlayerActionC2SPacket(
                    PlayerActionC2SPacket.Action.STOP_DESTROY_BLOCK,
                    blockPos,
                    Direction.UP
                )
            )

            mining = true
        } else if (mining) {
            mining = false
        }

        if (mining) {
            player.pos.y -= 0.0052
        }

        if (player.isSneaking) {
            val movementDistance = 0.005f
            val rotation = Math.toRadians(player.yaw.toDouble())

            when {
                mc.options.forwardKey.isPressed -> move(rotation, movementDistance, 1, 1)
                mc.options.backKey.isPressed -> move(rotation, -movementDistance, 1, -1)
                mc.options.leftKey.isPressed -> move(rotation, movementDistance, -1, 1)
                mc.options.rightKey.isPressed -> move(rotation, -movementDistance, -1, -1)
            }
        }
    }

    private fun move(rotation: Double, distance: Float, xMultiplier: Int, zMultiplier: Int) {
        val xx = cos(rotation) * distance * xMultiplier
        val zz = sin(rotation) * distance * zMultiplier

        player.setPosition(player.x + xx, player.y, player.z + zz)
    }
}
