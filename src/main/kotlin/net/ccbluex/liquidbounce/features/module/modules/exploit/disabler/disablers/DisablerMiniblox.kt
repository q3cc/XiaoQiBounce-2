/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.disablers

import net.ccbluex.liquidbounce.config.types.nesting.ToggleableConfigurable
import net.ccbluex.liquidbounce.event.tickHandler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.ModuleDisabler
import net.ccbluex.liquidbounce.lang.translation
import net.ccbluex.liquidbounce.utils.client.*

internal object DisablerMiniblox : ToggleableConfigurable(ModuleDisabler, "Miniblox", false) {

    @Suppress("unused")
    private val tickHandler = tickHandler {
        if (!usesViaFabricPlus || !isEqual1_8) {
            chat(markAsError(translation("liquidbounce.module.disabler.messages.minibloxProtocol")))
            ModuleDisabler.enabled = false
            return@tickHandler
        }

        send1_8PlayerInput(
            player.input.movementSideways,
            player.input.movementForward,
            player.jumping,
            player.inSneakingPose
        )
    }
}
