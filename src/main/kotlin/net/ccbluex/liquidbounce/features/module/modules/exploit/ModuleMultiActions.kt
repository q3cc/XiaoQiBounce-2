/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2025 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.config.types.NamedChoice
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.ClientModule

object ModuleMultiActions : ClientModule("MultiActions", Category.EXPLOIT, aliases = arrayOf("MultiTask")) {
    private val actions by multiEnumChoice("Actions", Actions.entries)

    @JvmStatic
    fun mayPlaceWhileBreaking() =
        this.enabled && Actions.PLACING_WHILE_BREAKING in actions

    @JvmStatic
    fun mayAttackWhileUsing() =
        this.enabled && Actions.ATTACKING_WHILE_USING in actions

    @JvmStatic
    fun mayBreakWhileUsing() =
        this.enabled && Actions.BREAKING_WHILE_USING in actions

    private enum class Actions(override val choiceName: String) : NamedChoice {
        PLACING_WHILE_BREAKING("PlacingWhileBreaking"),
        ATTACKING_WHILE_USING("AttackingWhileUsing"),
        BREAKING_WHILE_USING("BreakingWhileUsing")
    }
}
