/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.disablers

import net.ccbluex.liquidbounce.config.types.nesting.ToggleableConfigurable
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.event.tickHandler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.ModuleDisabler
import net.ccbluex.liquidbounce.features.module.modules.world.scaffold.ModuleScaffold
import net.ccbluex.liquidbounce.utils.math.copy
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket

internal object DisablerHypixelScaffold : ToggleableConfigurable(ModuleDisabler, "HypixelScaffold", false) {

    private var hasDisabled = false
    private var hasJumped = false
    private var readyToDisable = false

    override fun enable() {
        hasDisabled = false
        hasJumped = false
        readyToDisable = false
        super.enable()
    }

    val tickHandler = tickHandler {
        if (!ModuleScaffold.enabled) {
            hasDisabled = false
            hasJumped = false
            readyToDisable = false
            return@tickHandler
        }

        if (player.isOnGround && hasJumped) {
            hasDisabled = true
            return@tickHandler
        }

        if (!readyToDisable && player.isOnGround) {
            readyToDisable = true
            player.velocity = player.velocity.copy(y = 0.01)
            hasJumped = true
        }
    }

    val packetHandler = handler<PacketEvent> { event ->
        if (event.packet !is PlayerMoveC2SPacket) {
            return@handler
        }
        if (!hasDisabled) {
            return@handler
        }
        if (!ModuleScaffold.enabled) {
            return@handler
        }
        if (ModuleScaffold.isTowering) {
            hasDisabled = false
            hasJumped = false
            return@handler
        }

        if (player.isOnGround) {
            event.packet.y += if (player.age % 2 == 0) 0.03 else 1E-5
        }
    }
}
