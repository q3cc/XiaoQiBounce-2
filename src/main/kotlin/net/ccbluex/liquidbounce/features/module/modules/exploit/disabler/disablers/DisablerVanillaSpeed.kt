/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2025 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.disablers

import net.ccbluex.liquidbounce.config.types.nesting.ToggleableConfigurable
import net.ccbluex.liquidbounce.event.EventState
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.events.PlayerNetworkMovementTickEvent
import net.ccbluex.liquidbounce.event.events.WorldChangeEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.ModuleDisabler
import net.ccbluex.liquidbounce.utils.client.MovePacketType
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket
import net.minecraft.util.math.MathHelper

internal object DisablerVanillaSpeed : ToggleableConfigurable(ModuleDisabler, "VanillaSpeed", false) {
    // rotating packets don't seem to work
    private val packetType by enumChoice("PacketType", MovePacketType.ON_GROUND_ONLY,
        arrayOf(MovePacketType.ON_GROUND_ONLY, MovePacketType.POSITION_AND_ON_GROUND))
    private val distancePerPacket by float("DistancePerPacket", 10f, 1f..20f)

    private var skip = false

    @Suppress("unused")
    private val moveHandler = handler<PlayerNetworkMovementTickEvent> { event ->
        if (event.state != EventState.PRE || skip) {
            skip = false
            return@handler
        }

        val distance = MathHelper.magnitude(
            player.x - player.lastX,
            player.y - player.lastBaseY,
            player.z - player.lastZ
        )

        val packets = (distance / distancePerPacket).toInt()

        repeat(packets) {
            network.sendPacket(packetType.generatePacket().apply {
                this.x = player.lastX
                this.y = player.lastBaseY
                this.z = player.lastZ
            })
        }
    }

    @Suppress("unused")
    private val worldChangeHandler = handler<WorldChangeEvent> { event ->
        skip = true
    }

    @Suppress("unused")
    private val packetHandler = handler<PacketEvent> { event ->
        if (event.packet is PlayerPositionLookS2CPacket) {
            skip = true
        }
    }
}
